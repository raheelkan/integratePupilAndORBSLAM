function data = importPose(filename)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   POSE = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   POSE = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   Pose = importfile('0234_Pose.csv', 1, 1);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/02/20 18:52:45

%% Initialize variables.
% if nargin<=2
%     startRow = 1;
%     endRow = inf;
% end
startRow = 1;
%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%11f%13f%13f%13f%12f%12f%13f%12f%12f%12f%12f%12f%12f%12f%12f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
endRow = size(dataArray, 1);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
Pose = table(dataArray{1:end-1}, 'VariableNames', {'VarName1','VarName2','VarName3','VarName4','VarName5','VarName6','VarName7','VarName8','VarName9','VarName10','VarName11','VarName12','VarName13','VarName14','VarName15','VarName16'});
data = [Pose.VarName1 Pose.VarName2 Pose.VarName3 Pose.VarName4 Pose.VarName5 Pose.VarName6 Pose.VarName7 Pose.VarName8 Pose.VarName9 Pose.VarName10 Pose.VarName11 Pose.VarName12 Pose.VarName13 Pose.VarName14 Pose.VarName15 Pose.VarName16];
